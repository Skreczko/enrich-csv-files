"""
Django settings for transformer project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import sys
from pathlib import Path
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.celery import CeleryIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
DATA_DIR = os.path.dirname(BASE_DIR)
FRONTEND_DIR = os.path.join(BASE_DIR, "frontend")

# https://docs.djangoproject.com/en/3.2/ref/files/uploads/#uploaded-files
FILE_UPLOAD_MAX_MEMORY_SIZE = 0
FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]

TEST = False
TEST_RUNNER = "conftest.PytestTestRunner"
MYPY = "mypy" in sys.argv[0]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", False)

ALLOWED_HOSTS = [os.environ.get("ALLOWED_HOSTS", "")]


# Application definition
INSTALLED_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.staticfiles",
]

# When doing type checking via mypy, disable third-party plugins as
# we can avoid installing all third party dependencies
if not MYPY:
    INSTALLED_APPS += [
        "webpack_loader",
        "django_extensions",
    ]

INSTALLED_APPS += [
    "csv_manager",
]

MIDDLEWARE = [
    # https://docs.djangoproject.com/en/3.2/_modules/django/middleware/gzip/#GZipMiddleware
    "django.middleware.gzip.GZipMiddleware",
]

ROOT_URLCONF = "transformer.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(FRONTEND_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "transformer.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
POSTGRES_NAME = os.environ.get("POSTGRES_NAME", "transformer")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": os.environ.get("POSTGRES_HOST", "postgres"),
        "NAME": POSTGRES_NAME,
        "USER": os.environ.get("POSTGRES_USER", "postgres"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
        "TEST": {
            "NAME": f"{POSTGRES_NAME}_test",
        },
    }
}


# Celery
BROKER_URL = os.environ["BROKER_URL"]
CELERY_BROKER_URL = f"{BROKER_URL}/0"
CELERY_RESULT_BACKEND = f"{BROKER_URL}/1"
CELERY_WORKER_CONCURRENCY = 1
# CELERY_TASK_ALWAYS_EAGER = True


# Cache https://docs.djangoproject.com/en/3.2/topics/cache/
# https://pypi.org/project/django-redis/
CACHE_BACKEND = os.environ.get("CACHE_BACKEND", "django_redis.cache.RedisCache")
CACHE_LOCATION = os.environ.get("CACHE_LOCATION", "redis://redis:6379/1")
CACHES = {
    "default": {
        "BACKEND": CACHE_BACKEND,
        "LOCATION": CACHE_LOCATION,
    },
}
if CACHE_LOCATION.startswith("redis://"):
    # only required when using redis
    CACHES["default"]["OPTIONS"] = {"CLIENT_CLASS": "django_redis.client.DefaultClient"}
SESSION_CACHE_ALIAS = "default"

# TODO add cache for local-memory cachong


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
USE_TZ = True
TIME_ZONE = "UTC"

LANGUAGE_CODE = "en-us"
USE_I18N = True
USE_L10N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = "frontend/static/"
LOCAL_STATICFILES_DIR = os.path.join(FRONTEND_DIR, "static")
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [
    os.path.join(FRONTEND_DIR, "static/bundles"),
    # only for local purposes
    LOCAL_STATICFILES_DIR,
]

# MEDIA FILES
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# WEBPACK
WEBPACK_LOADER_TEST_DISABLED = True
WEBPACK_LOADER = {
    "DEFAULT": {
        "USE_DEV_SERVER": False,
        "CACHE": not DEBUG,
        "BUNDLE_DIR_NAME": "./",
        "STATS_FILE": os.path.join(FRONTEND_DIR, "webpack-stats.json"),
    }
}

SENTRY_DNS = os.environ.get("SENTRY_DNS")

if SENTRY_DNS:
    # https://adverity-transformer-197cd18c7.sentry.io/issues/
    sentry_sdk.init(
        dsn=SENTRY_DNS,
        integrations=[CeleryIntegration(), DjangoIntegration()],
        environment="transformer",
    )

if DEBUG:
    # django-debug-toolbar https://pypi.org/project/django-debug-toolbar/
    from transformer.dev_settings import *

    try:
        import debug_toolbar
        INSTALLED_APPS += ["debug_toolbar"]
        MIDDLEWARE += [
            "django.middleware.common.CommonMiddleware",
            "debug_toolbar.middleware.DebugToolbarMiddleware",
        ]

    except ImportError:
        pass
